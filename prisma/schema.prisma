// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id       String    @id
  email    String?
  username String
  pwd      String

  sessions Session[]
  Order Order[]
  OrderLog OrderLog[]
  FillLog FillLog[]
  FeeLog FeeLog[]
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime

  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Order {
  id        String   @id @default(cuid())
  userId    String
  // BTC/USDT
  symbol    String
  // hanging | fullfilled | canceled | finished
  status    String
  // market | limit | plan
  orderType String
  orderAmount    Float
  filledAmount   Float?
  orderPrice     Float
  filledPrice    Float?
  filledValue    Float?

  // Order Detail
  fee            Float?
  created        DateTime @default(now())

  // Fill Detail
  fillTime       DateTime?

  user      User     @relation(references: [id], fields: [userId], onDelete: Restrict)

  OrderLog OrderLog[]
  FillLog FillLog[]
  FeeLog FeeLog[]
}

// 下订单的 Log
model OrderLog {
  id        String   @id
  userId    String
  orderId   String

  symbol    String
  orderType String
  orderAmount    Float
  orderPrice     Float
  created        DateTime @default(now())
  fee            Float

  user      User     @relation(references: [id], fields: [userId], onDelete: Restrict)
  order     Order    @relation(references: [id], fields: [orderId], onDelete: Restrict)
}

// 满足订单的 Log
model FillLog {
  id        String   @id
  userId    String
  orderId   String

  symbol    String
  filledAmount   Float
  filledPrice    Float
  filledValue    Float
  created        DateTime @default(now())
  fee            Float


  user      User     @relation(references: [id], fields: [userId], onDelete: Restrict)
  order     Order    @relation(references: [id], fields: [orderId], onDelete: Restrict)
}

model FeeLog {
  id        String   @id
  userId    String
  orderId   String

  // makeOrderFee | fullfillOrderFee | fundingFee
  feeType   String
  amount    Float

  user      User     @relation(references: [id], fields: [userId], onDelete: Restrict)
  order     Order    @relation(references: [id], fields: [orderId], onDelete: Restrict)
}

model Period {
  id        String   @id
  symble    String
  startTime DateTime
  endTime   DateTime

  // JSON Array
  userIds   String
}

model Ohlcv {
  symbol_id         String
  period            String
  time_period_start DateTime
  time_period_end   DateTime
  time_open         DateTime?
  time_close        DateTime?
  price_open        Float?
  price_high        Float?
  price_low         Float?
  price_close       Float?
  volume_traded     Float
  trades_count      Int

  @@id([period, time_period_start])
}
